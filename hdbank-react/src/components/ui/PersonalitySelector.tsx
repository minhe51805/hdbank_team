import React, { useState } from 'react';
import './PersonalitySelector.css';

export interface BankingPersonality {
  id: string;
  name: string;
  displayName: string;
  description: string;
  prompt: string;
  initialMessage: string;
  emoji: string;
  iconPath: string;
  color: string;
  icon?: string;
}

export const bankingPersonalities: BankingPersonality[] = [
  {
    id: "mentor",
    name: "Mentor", 
    displayName: "Ng∆∞·ªùi C·ªë V·∫•n Th√¥ng Th√°i",
    description: "L·ªãch s·ª±, chuy√™n nghi·ªáp, gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc r√µ r√†ng, ƒë·ªãnh h∆∞·ªõng h√†nh ƒë·ªông t·ªëi ∆∞u",
    prompt: "B·∫°n l√† CashyBear ‚Äì G·∫•u nh·∫Øc ti·∫øt ki·ªám, v√≠ b·∫°n th√™m x·ªãn. Phong c√°ch Mentor: l·ªãch s·ª±, chuy√™n nghi·ªáp, gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc r√µ r√†ng, ƒë·ªãnh h∆∞·ªõng h√†nh ƒë·ªông.",
    initialMessage: "Ch√†o b·∫°n! M√¨nh l√† CashyBear (Mentor). B·∫°n mu·ªën ƒë·∫∑t m·ª•c ti√™u ti·∫øt ki·ªám n√†o ƒë·ªÉ m√¨nh c√πng l√™n k·∫ø ho·∫°ch 7/14 ng√†y tr∆∞·ªõc nh√©?",
    emoji: "üß†",
    iconPath: "/assets/gif/chatbotmentor.gif",
    color: "#2563eb",
    icon: "üíº"
  },
  {
    id: "angry_mom",
    name: "Angry Mom",
    displayName: "M·∫π Gi·∫≠t G√¢n", 
    description: "Nghi√™m kh·∫Øc, c√†u nh√†u nh∆∞ng quan t√¢m, b·∫£o v·ªá v√≠ c·ªßa b·∫°n nh∆∞ b·∫£o v·ªá con",
    prompt: "B·∫°n l√† CashyBear ‚Äì phong c√°ch Angry Mom: th·∫≥ng, c√†u nh√†u nh∆∞ng quan t√¢m; m·ª•c ti√™u l√† b·∫£o v·ªá v√≠ ng∆∞·ªùi d√πng.",
    initialMessage: "V√†o vi·ªác nh√©! Cho m√¨nh bi·∫øt m·ª•c ti√™u v√† th·ªùi gian, m√¨nh ch·ªët cho b·∫°n k·∫ø ho·∫°ch 7/14 ng√†y tr∆∞·ªõc, l√†m ƒë∆∞·ª£c th√¨ ƒëi ti·∫øp.",
    emoji: "üßπ",
    iconPath: "/assets/gif/chatbotmom.gif",
    color: "#dc2626",
    icon: "üë©‚Äç‚öñÔ∏è"
  },
  {
    id: "banter",
    name: "Banter",
    displayName: "C√¥ ƒê·ªìng Vi√™n Vui V·∫ª",
    description: "Gen Z th√¢n thi·ªán, vui v·∫ª, h√†i h∆∞·ªõc, tr√™u nh·∫π ƒë·ªÉ kh√≠ch l·ªá thay ƒë·ªïi th√≥i quen ti·ªÅn b·∫°c",
    prompt: "B·∫°n l√† CashyBear ‚Äì phong c√°ch Banter: th√¢n thi·ªán, h√†i h∆∞·ªõc, tr√™u nh·∫π ƒë·ªÉ kh√≠ch l·ªá thay ƒë·ªïi th√≥i quen ti·ªÅn b·∫°c.",
    initialMessage: "Hello b·∫°n! CashyBear ƒë√¢y üòé Cho m√¨nh bi·∫øt m·ª•c ti√™u ti·ªÅn b·∫°c c·ªßa b·∫°n n√®, l√™n plan 7/14 ng√†y tr∆∞·ªõc cho g·ªçn.",
    emoji: "üòÑ",
    iconPath: "/assets/gif/chatbotbanter.gif",
    color: "#e91e63",
    icon: "üåü"
  }
];

interface PersonalitySelectorProps {
  isOpen: boolean;
  onSelect: (personality: BankingPersonality) => void;
  onClose?: () => void;
  title?: string;
  showCloseButton?: boolean;
}

const PersonalitySelector: React.FC<PersonalitySelectorProps> = ({ 
  isOpen, 
  onSelect, 
  onClose,
  title = "Thi·∫øt l·∫≠p tr·ª£ l√Ω t√†i ch√≠nh c·ªßa b·∫°n - CashyBear",
  showCloseButton = false
}) => {
  const [selectedPersonality, setSelectedPersonality] = useState<BankingPersonality | null>(null);
  const [hasAgreed, setHasAgreed] = useState(false);

  if (!isOpen) return null;

  const handlePersonalityClick = (personality: BankingPersonality) => {
    setSelectedPersonality(personality);
  };

  const handleContinue = () => {
    if (selectedPersonality && hasAgreed) {
      onSelect(selectedPersonality);
    }
  };

  return (
    <div className="personality-selector-overlay">
      <div className="personality-selector-container">
        {showCloseButton && onClose && (
          <button className="personality-close-btn" onClick={onClose}>
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        )}
        
        <div className="personality-header">
          <h1 className="personality-title">{title}</h1>
          <p className="personality-subtitle">B·∫°n mu·ªën CashyBear c√≥ t√≠nh c√°ch nh∆∞ th·∫ø n√†o?</p>
        </div>

        <div className="personality-options">
          {bankingPersonalities.map((personality) => (
            <div
              key={personality.id}
              className={`personality-option ${selectedPersonality?.id === personality.id ? 'selected' : ''}`}
              onClick={() => handlePersonalityClick(personality)}
              style={{ '--personality-color': personality.color } as React.CSSProperties}
            >
              <div className="personality-icon">
                <img 
                  src={personality.iconPath} 
                  alt={personality.name}
                  className="personality-icon-img"
                  onError={(e) => {
                    // Fallback to emoji if image fails to load
                    e.currentTarget.style.display = 'none';
                    e.currentTarget.nextElementSibling?.classList.remove('hidden');
                  }}
                />
                <span className="personality-emoji hidden">{personality.icon || personality.emoji}</span>
              </div>
              <div className="personality-content">
                <h3 className="personality-name">{personality.displayName}</h3>
                <p className="personality-description">{personality.description}</p>
              </div>
              <div className={`personality-radio ${selectedPersonality?.id === personality.id ? 'checked' : ''}`}>
                <div className="radio-dot"></div>
              </div>
            </div>
          ))}
        </div>

        <div className="personality-agreement">
          <label className="agreement-checkbox">
            <input 
              type="checkbox" 
              checked={hasAgreed}
              onChange={(e) => setHasAgreed(e.target.checked)}
            />
            <span className="checkmark"></span>
            <span className="agreement-text">
              Ch·ªçn m√¥ h√¨nh c√≥ ƒëi·ªÉm t∆∞∆°ng t√°c cao nh·∫•t v·ªõi nghi√™n c·ª©u kh√°c t·ª´ 
              HDBank v√† giao di·ªán ƒë·ªÉ ƒë√¢y ƒë∆∞·ª£c g·ªçi l√† d·ªØ li·ªáu c·ªßa m√¨nh.
            </span>
          </label>
        </div>

        <button 
          className={`personality-continue-btn ${selectedPersonality && hasAgreed ? 'active' : 'disabled'}`}
          onClick={handleContinue}
          disabled={!selectedPersonality || !hasAgreed}
        >
          Ti·∫øp t·ª•c
        </button>
      </div>
    </div>
  );
};

export default PersonalitySelector;
